#ifndef __JVX_SYSTEM_ERROR_TYPE_H__
#define __JVX_SYSTEM_ERROR_TYPE_H__

#include "jvx_system_error_types.h"

// ==================================================================
// Error types
// ==================================================================

static jvxTextHelpers jvxErrorType_str[JVX_ERROR_LIMIT] =
{
	{"JVX_NO_ERROR", "JVX_NO_ERROR"},
	{"JVX_ERROR_UNKNOWN", "JVX_ERROR_UNKNOWN" },
	{"JVX_ERROR_INVALID_ARGUMENT", "JVX_ERROR_INVALID_ARGUMENT"},
	{"JVX_ERROR_WRONG_STATE", "JVX_ERROR_WRONG_STATE"},
	{"JVX_ERROR_ID_OUT_OF_BOUNDS", "JVX_ERROR_ID_OUT_OF_BOUNDS"},
	{"JVX_ERROR_UNSUPPORTED", "JVX_ERROR_UNSUPPORTED"},
	{"JVX_ERROR_ELEMENT_NOT_FOUND", "JVX_ERROR_ELEMENT_NOT_FOUND"},
	{"JVX_ERROR_DUPLICATE_ENTRY", "JVX_ERROR_DUPLICATE_ENTRY"},
	{"JVX_ERROR_OPEN_FILE_FAILED", "JVX_ERROR_OPEN_FILE_FAILED"},
	{"JVX_ERROR_UNEXPECTED", "JVX_ERROR_UNEXPECTED"},
	{"JVX_ERROR_NOT_READY", "JVX_ERROR_NOT_READY"},
	{"JVX_ERROR_COMPONENT_BUSY", "JVX_ERROR_COMPONENT_BUSY"},
	{"JVX_ERROR_BUFFER_OVERFLOW", "JVX_ERROR_BUFFER_OVERFLOW"},
	{"JVX_ERROR_BUFFER_UNDERRUN", "JVX_ERROR_BUFFER_UNDERRUN"},
	{"JVX_ERROR_WRONG_STATE_SUBMODULE", "JVX_ERROR_WRONG_STATE_SUBMODULE"},
	{"JVX_ERROR_MESSAGE_QUEUE_FULL", "JVX_ERROR_MESSAGE_QUEUE_FULL"},
	{"JVX_ERROR_PARSE_ERROR", "JVX_ERROR_PARSE_ERROR"},
	{"JVX_ERROR_WRONG_SECTION_TYPE", "JVX_ERROR_WRONG_SECTION_TYPE"},
	{"JVX_ERROR_INTERNAL", "JVX_ERROR_INTERNAL"},
	{"JVX_ERROR_EMPTY_LIST", "JVX_ERROR_EMPTY_LIST"},
	{"JVX_ERROR_CALL_SUB_COMPONENT_FAILED", "JVX_ERROR_CALL_SUB_COMPONENT_FAILED"},
	{"JVX_ERROR_THREADING_MISMATCH", "JVX_ERROR_THREADING_MISMATCH"},
	{"JVX_ERROR_SYSTEMCALL_FAILED", "JVX_ERROR_SYSTEMCALL_FAILED"},
	{"JVX_ERROR_SIZE_MISMATCH", "JVX_ERROR_SIZE_MISMATCH"},
	{"JVX_ERROR_NO_ACCESS", "JVX_ERROR_NO_ACCESS"},
	{"JVX_ERROR_INVALID_SETTING", "JVX_ERROR_INVALID_SETTING"},
	{"JVX_ERROR_TIMEOUT", "JVX_ERROR_TIMEOUT"},
	{"JVX_ERROR_ABORT", "JVX_ERROR_ABORT"},
	{"JVX_ERROR_POSTPONE", "JVX_ERROR_POSTPONE"},
	{"JVX_ERROR_END_OF_FILE", "JVX_ERROR_END_OF_FILE"},
	{"JVX_ERROR_STANDARD_EXCEPTION", "JVX_ERROR_STANDARD_EXCEPTION"},
	{"JVX_ERROR_SEQUENCER_TOOK_CONTROL", "JVX_ERROR_SEQUENCER_TOOK_CONTROL"},
	{"JVX_ERROR_THREAD_ONCE_MORE", "JVX_ERROR_THREAD_ONCE_MORE"},
	{"JVX_ERROR_PROCESS_COMPLETE", "JVX_ERROR_PROCESS_COMPLETE"},
	{"JVX_ERROR_DSP", "JVX_ERROR_DSP"},
	{"JVX_ERROR_ALREADY_IN_USE", "JVX_ERROR_ALREADY_IN_USE"},
	{"JVX_ERROR_PROTOCOL_ERROR", "JVX_ERROR_PROTOCOL_ERROR"},
	{"JVX_ERROR_NOT_ENOUGH_INPUT_DATA", "JVX_ERROR_NOT_ENOUGH_INPUT_DATA" },
	{"JVX_ERROR_NOT_ENOUGH_OUTPUT_SPACE", "JVX_ERROR_NOT_ENOUGH_OUTPUT_SPACE"},
	{ "JVX_ERROR_COMPROMISE", "JVX_ERROR_COMPROMISE"},
	{ "JVX_ERROR_REMOTE", "JVX_ERROR_REMOTE"},
	{ "JVX_ERROR_ALLOCATION", "JVX_ERROR_ALLOCATION"},
	{ "JVX_ERROR_INVALID_FORMAT", "JVX_ERROR_INVALID_FORMAT"},
	{ "JVX_ERROR_REQUEST_CALL_AGAIN", "JVX_ERROR_REQUEST_CALL_AGAIN"},
	{ "JVX_ERROR_NOT_IMPLEMENTED", "JVX_ERROR_NOT_IMPLEMENTED"}

	//"JVX_ERROR_LIMIT"
} ;

JVX_SYSTEM_LIB_BEGIN

const char* jvxErrorType_txt(jvxSize id);
const char* jvxErrorType_descr(jvxSize id);
jvxErrorType jvxErrorType_decode(const char* txt);

JVX_SYSTEM_LIB_END

#endif
