diff -ur libebur128/ebur128/CMakeLists.txt libebur128.orig/ebur128/CMakeLists.txt
--- libebur128/ebur128/CMakeLists.txt	2022-02-09 13:08:10.024080700 +0100
+++ libebur128.orig/ebur128/CMakeLists.txt	2023-01-25 14:38:30.980069300 +0100
@@ -28,61 +28,43 @@
 
 
 set(EBUR128_VERSION_MAJOR 1)
-set(EBUR128_VERSION 1.2.4)
+set(EBUR128_VERSION 1.2.6)
 
-#### static
-if(BUILD_STATIC_LIBS)
-  add_library(ebur128_static STATIC ebur128.c)
-  if(NOT MSVC)
-    set_property(TARGET ebur128_static PROPERTY OUTPUT_NAME ebur128)
+add_library(ebur128 ebur128.c)
+set_target_properties(ebur128 PROPERTIES
+  SOVERSION ${EBUR128_VERSION_MAJOR}
+  VERSION ${EBUR128_VERSION}
+)
+
+if(BUILD_SHARED_LIBS)
+  if(MSVC)
+    target_sources(ebur128 PRIVATE ebur128.def)
+  endif()
+else()
+  if(WITH_STATIC_PIC)
+    set_property(TARGET ebur128 PROPERTY POSITION_INDEPENDENT_CODE ON)
   endif()
 endif()
 
-if(WITH_STATIC_PIC)
-  set_property(TARGET ebur128_static PROPERTY POSITION_INDEPENDENT_CODE ON)
-endif()
-
-#### shared
-# set source file for library, which includes def file if using MSVC
-set(EBUR128_SHARED_SOURCE ebur128.c)
-if(MSVC)
-  set(EBUR128_SHARED_SOURCE ${EBUR128_SHARED_SOURCE} ebur128.def)
+# Link with Math library if available
+find_library(MATH_LIBRARY m)
+if(MATH_LIBRARY)
+  target_link_libraries(ebur128 ${MATH_LIBRARY})
 endif()
 
-add_library(ebur128 SHARED ${EBUR128_SHARED_SOURCE})
-set_target_properties(ebur128 PROPERTIES
-    SOVERSION ${EBUR128_VERSION_MAJOR}
-    VERSION ${EBUR128_VERSION})
-if(WIN32)
-  set_target_properties(ebur128 
-    PROPERTIES OUTPUT_NAME ebur128 RUNTIME_OUTPUT_NAME ebur128-${EBUR128_VERSION_MAJOR}
-    ARCHIVE_OUTPUT_NAME ebur128)
-endif(WIN32)
 if(ENABLE_FUZZER)
   target_compile_options(ebur128 PUBLIC "${FUZZER_FLAGS}")
   target_compile_definitions(ebur128 PRIVATE malloc=my_malloc calloc=my_calloc)
   target_link_libraries(ebur128 "${SANITIZER_FLAGS}")
 endif()
 
-find_library(MATH_LIBRARY m)
-if(MATH_LIBRARY)
-  target_link_libraries(ebur128 ${MATH_LIBRARY})
-endif()
-
 set(EBUR128_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL "")
 
 install(FILES ebur128.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
-if(BUILD_STATIC_LIBS)
-  install(TARGETS ebur128 ebur128_static
-          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
-else()
-  install(TARGETS ebur128
-          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
-endif()
+install(TARGETS ebur128
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 #### pkg-config
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libebur128.pc.cmake
diff -ur libebur128/ebur128/ebur128.c libebur128.orig/ebur128/ebur128.c
--- libebur128/ebur128/ebur128.c	2022-02-09 13:08:14.468959400 +0100
+++ libebur128.orig/ebur128/ebur128.c	2023-01-25 14:38:30.981066800 +0100
@@ -18,6 +18,18 @@
   }
 #define EBUR128_MAX(a, b) (((a) > (b)) ? (a) : (b))
 
+static int safe_size_mul(size_t nmemb, size_t size, size_t* result) {
+  /* Adapted from OpenBSD reallocarray. */
+#define MUL_NO_OVERFLOW (((size_t) 1) << (sizeof(size_t) * 4))
+  if ((nmemb >= MUL_NO_OVERFLOW || size >= MUL_NO_OVERFLOW) && /**/
+      nmemb > 0 && ((size_t) (-1)) / nmemb < size) {
+    return 1;
+  }
+#undef MUL_NO_OVERFLOW
+  *result = nmemb * size;
+  return 0;
+}
+
 STAILQ_HEAD(ebur128_double_queue, ebur128_dq_entry);
 struct ebur128_dq_entry {
   double z;
@@ -385,9 +397,6 @@
 
 #define VALIDATE_MAX_CHANNELS (64)
 #define VALIDATE_MAX_SAMPLERATE (2822400)
-#define VALIDATE_MAX_WINDOW                                                    \
-  ((3ul << 30) / VALIDATE_MAX_SAMPLERATE / VALIDATE_MAX_CHANNELS /             \
-   sizeof(double))
 
 #define VALIDATE_CHANNELS_AND_SAMPLERATE(err)                                  \
   do {                                                                         \
@@ -897,23 +906,30 @@
     return EBUR128_ERROR_NO_CHANGE;
   }
 
-  if (window >= VALIDATE_MAX_WINDOW) {
+  size_t new_audio_data_frames;
+  if (safe_size_mul(st->samplerate, window, &new_audio_data_frames) != 0 ||
+      new_audio_data_frames > ((size_t) -1) - st->d->samples_in_100ms) {
     return EBUR128_ERROR_NOMEM;
   }
+  if (new_audio_data_frames % st->d->samples_in_100ms) {
+    /* round up to multiple of samples_in_100ms */
+    new_audio_data_frames = (new_audio_data_frames + st->d->samples_in_100ms) -
+                            (new_audio_data_frames % st->d->samples_in_100ms);
+  }
+
+  size_t new_audio_data_size;
+  if (safe_size_mul(new_audio_data_frames, st->channels * sizeof(double),
+                    &new_audio_data_size) != 0) {
+    return EBUR128_ERROR_NOMEM;
+  }
+
+  double* new_audio_data = (double*) malloc(new_audio_data_size);
+  CHECK_ERROR(!new_audio_data, EBUR128_ERROR_NOMEM, exit)
 
   st->d->window = window;
   free(st->d->audio_data);
-  st->d->audio_data = NULL;
-  st->d->audio_data_frames = st->samplerate * st->d->window / 1000;
-  if (st->d->audio_data_frames % st->d->samples_in_100ms) {
-    /* round up to multiple of samples_in_100ms */
-    st->d->audio_data_frames =
-        (st->d->audio_data_frames + st->d->samples_in_100ms) -
-        (st->d->audio_data_frames % st->d->samples_in_100ms);
-  }
-  st->d->audio_data = (double*) malloc(st->d->audio_data_frames * st->channels *
-                                       sizeof(double));
-  CHECK_ERROR(!st->d->audio_data, EBUR128_ERROR_NOMEM, exit)
+  st->d->audio_data = new_audio_data;
+  st->d->audio_data_frames = new_audio_data_frames;
   for (j = 0; j < st->d->audio_data_frames * st->channels; ++j) {
     st->d->audio_data[j] = 0.0;
   }
@@ -1222,7 +1238,7 @@
   size_t interval_frames;
   int error;
 
-  if (window >= VALIDATE_MAX_WINDOW) {
+  if (window > st->d->window) {
     return EBUR128_ERROR_INVALID_MODE;
   }
 
@@ -1318,8 +1334,8 @@
       return EBUR128_SUCCESS;
     }
 
-    percentile_low = (size_t)((stl_size - 1) * 0.1 + 0.5);
-    percentile_high = (size_t)((stl_size - 1) * 0.95 + 0.5);
+    percentile_low = (size_t) ((stl_size - 1) * 0.1 + 0.5);
+    percentile_high = (size_t) ((stl_size - 1) * 0.95 + 0.5);
 
     stl_size = 0;
     j = index;
@@ -1380,8 +1396,8 @@
   }
 
   if (stl_relgated_size) {
-    h_en = stl_relgated[(size_t)((stl_relgated_size - 1) * 0.95 + 0.5)];
-    l_en = stl_relgated[(size_t)((stl_relgated_size - 1) * 0.1 + 0.5)];
+    h_en = stl_relgated[(size_t) ((stl_relgated_size - 1) * 0.95 + 0.5)];
+    l_en = stl_relgated[(size_t) ((stl_relgated_size - 1) * 0.1 + 0.5)];
     free(stl_vector);
     *out = ebur128_energy_to_loudness(h_en) - ebur128_energy_to_loudness(l_en);
   } else {
@@ -1442,25 +1458,6 @@
   return EBUR128_SUCCESS;
 }
 
-int ebur128_true_peak_forget(ebur128_state* st,
-                      unsigned int channel_number,
-                      double* out, double forget) {
-  if ((st->mode & EBUR128_MODE_TRUE_PEAK) != EBUR128_MODE_TRUE_PEAK) {
-    return EBUR128_ERROR_INVALID_MODE;
-  }
-
-  if (channel_number >= st->channels) {
-    return EBUR128_ERROR_INVALID_CHANNEL_INDEX;
-  }
-
-  *out = EBUR128_MAX(st->d->true_peak[channel_number],
-                     st->d->sample_peak[channel_number]);
-
-  st->d->true_peak[channel_number] *= forget;
-  st->d->sample_peak[channel_number] *= forget;
-
-  return EBUR128_SUCCESS;
-}
 int ebur128_prev_true_peak(ebur128_state* st,
                            unsigned int channel_number,
                            double* out) {
diff -ur libebur128/ebur128/ebur128.h libebur128.orig/ebur128/ebur128.h
--- libebur128/ebur128/ebur128.h	2022-02-09 13:08:14.468959400 +0100
+++ libebur128.orig/ebur128/ebur128.h	2023-01-25 14:38:30.981066800 +0100
@@ -14,52 +14,52 @@
 
 #define EBUR128_VERSION_MAJOR 1
 #define EBUR128_VERSION_MINOR 2
-#define EBUR128_VERSION_PATCH 4
+#define EBUR128_VERSION_PATCH 6
 
-#include <stddef.h>       /* for size_t */
+#include <stddef.h> /* for size_t */
 
 /** \enum channel
  *  Use these values when setting the channel map with ebur128_set_channel().
  *  See definitions in ITU R-REC-BS 1770-4
  */
 enum channel {
-  EBUR128_UNUSED = 0,     /**< unused channel (for example LFE channel) */
-  EBUR128_LEFT   = 1,
-  EBUR128_Mp030  = 1,     /**< itu M+030 */
-  EBUR128_RIGHT  = 2,
-  EBUR128_Mm030  = 2,     /**< itu M-030 */
-  EBUR128_CENTER = 3,
-  EBUR128_Mp000  = 3,     /**< itu M+000 */
-  EBUR128_LEFT_SURROUND  = 4,
-  EBUR128_Mp110  = 4,     /**< itu M+110 */
-  EBUR128_RIGHT_SURROUND = 5,
-  EBUR128_Mm110  = 5,     /**< itu M-110 */
-  EBUR128_DUAL_MONO,      /**< a channel that is counted twice */
-  EBUR128_MpSC,           /**< itu M+SC */
-  EBUR128_MmSC,           /**< itu M-SC */
-  EBUR128_Mp060,          /**< itu M+060 */
-  EBUR128_Mm060,          /**< itu M-060 */
-  EBUR128_Mp090,          /**< itu M+090 */
-  EBUR128_Mm090,          /**< itu M-090 */
-  EBUR128_Mp135,          /**< itu M+135 */
-  EBUR128_Mm135,          /**< itu M-135 */
-  EBUR128_Mp180,          /**< itu M+180 */
-  EBUR128_Up000,          /**< itu U+000 */
-  EBUR128_Up030,          /**< itu U+030 */
-  EBUR128_Um030,          /**< itu U-030 */
-  EBUR128_Up045,          /**< itu U+045 */
-  EBUR128_Um045,          /**< itu U-030 */
-  EBUR128_Up090,          /**< itu U+090 */
-  EBUR128_Um090,          /**< itu U-090 */
-  EBUR128_Up110,          /**< itu U+110 */
-  EBUR128_Um110,          /**< itu U-110 */
-  EBUR128_Up135,          /**< itu U+135 */
-  EBUR128_Um135,          /**< itu U-135 */
-  EBUR128_Up180,          /**< itu U+180 */
-  EBUR128_Tp000,          /**< itu T+000 */
-  EBUR128_Bp000,          /**< itu B+000 */
-  EBUR128_Bp045,          /**< itu B+045 */
-  EBUR128_Bm045           /**< itu B-045 */
+  EBUR128_UNUSED = 0,         /**< unused channel (for example LFE channel) */
+  EBUR128_LEFT = 1,           /**<           */
+  EBUR128_Mp030 = 1,          /**< itu M+030 */
+  EBUR128_RIGHT = 2,          /**<           */
+  EBUR128_Mm030 = 2,          /**< itu M-030 */
+  EBUR128_CENTER = 3,         /**<           */
+  EBUR128_Mp000 = 3,          /**< itu M+000 */
+  EBUR128_LEFT_SURROUND = 4,  /**<           */
+  EBUR128_Mp110 = 4,          /**< itu M+110 */
+  EBUR128_RIGHT_SURROUND = 5, /**<           */
+  EBUR128_Mm110 = 5,          /**< itu M-110 */
+  EBUR128_DUAL_MONO,          /**< a channel that is counted twice */
+  EBUR128_MpSC,               /**< itu M+SC  */
+  EBUR128_MmSC,               /**< itu M-SC  */
+  EBUR128_Mp060,              /**< itu M+060 */
+  EBUR128_Mm060,              /**< itu M-060 */
+  EBUR128_Mp090,              /**< itu M+090 */
+  EBUR128_Mm090,              /**< itu M-090 */
+  EBUR128_Mp135,              /**< itu M+135 */
+  EBUR128_Mm135,              /**< itu M-135 */
+  EBUR128_Mp180,              /**< itu M+180 */
+  EBUR128_Up000,              /**< itu U+000 */
+  EBUR128_Up030,              /**< itu U+030 */
+  EBUR128_Um030,              /**< itu U-030 */
+  EBUR128_Up045,              /**< itu U+045 */
+  EBUR128_Um045,              /**< itu U-030 */
+  EBUR128_Up090,              /**< itu U+090 */
+  EBUR128_Um090,              /**< itu U-090 */
+  EBUR128_Up110,              /**< itu U+110 */
+  EBUR128_Um110,              /**< itu U-110 */
+  EBUR128_Up135,              /**< itu U+135 */
+  EBUR128_Um135,              /**< itu U-135 */
+  EBUR128_Up180,              /**< itu U+180 */
+  EBUR128_Tp000,              /**< itu T+000 */
+  EBUR128_Bp000,              /**< itu B+000 */
+  EBUR128_Bp045,              /**< itu B+045 */
+  EBUR128_Bm045               /**< itu B-045 */
 };
 
 /** \enum error
@@ -79,20 +79,19 @@
  */
 enum mode {
   /** can call ebur128_loudness_momentary */
-  EBUR128_MODE_M           = (1 << 0),
+  EBUR128_MODE_M = (1 << 0),
   /** can call ebur128_loudness_shortterm */
-  EBUR128_MODE_S           = (1 << 1) | EBUR128_MODE_M,
+  EBUR128_MODE_S = (1 << 1) | EBUR128_MODE_M,
   /** can call ebur128_loudness_global_* and ebur128_relative_threshold */
-  EBUR128_MODE_I           = (1 << 2) | EBUR128_MODE_M,
+  EBUR128_MODE_I = (1 << 2) | EBUR128_MODE_M,
   /** can call ebur128_loudness_range */
-  EBUR128_MODE_LRA         = (1 << 3) | EBUR128_MODE_S,
+  EBUR128_MODE_LRA = (1 << 3) | EBUR128_MODE_S,
   /** can call ebur128_sample_peak */
   EBUR128_MODE_SAMPLE_PEAK = (1 << 4) | EBUR128_MODE_M,
   /** can call ebur128_true_peak */
-  EBUR128_MODE_TRUE_PEAK   = (1 << 5) | EBUR128_MODE_M
-                                      | EBUR128_MODE_SAMPLE_PEAK,
+  EBUR128_MODE_TRUE_PEAK = (1 << 5) | EBUR128_MODE_M | EBUR128_MODE_SAMPLE_PEAK,
   /** uses histogram algorithm to calculate loudness */
-  EBUR128_MODE_HISTOGRAM   = (1 << 6)
+  EBUR128_MODE_HISTOGRAM = (1 << 6)
 };
 
 /** forward declaration of ebur128_state_internal */
@@ -103,10 +102,10 @@
  *  You should not need to modify this struct directly.
  */
 typedef struct {
-  int mode;                           /**< The current mode. */
-  unsigned int channels;              /**< The number of channels. */
-  unsigned long samplerate;           /**< The sample rate. */
-  struct ebur128_state_internal* d;   /**< Internal state. */
+  int mode;                         /**< The current mode. */
+  unsigned int channels;            /**< The number of channels. */
+  unsigned long samplerate;         /**< The sample rate. */
+  struct ebur128_state_internal* d; /**< Internal state. */
 } ebur128_state;
 
 /** \brief Get library version number. Do not pass null pointers here.
@@ -124,9 +123,8 @@
  *  @param mode see the mode enum for possible values.
  *  @return an initialized library state, or NULL on error.
  */
-ebur128_state* ebur128_init(unsigned int channels,
-                            unsigned long samplerate,
-                            int mode);
+ebur128_state*
+ebur128_init(unsigned int channels, unsigned long samplerate, int mode);
 
 /** \brief Destroy library state.
  *
@@ -220,17 +218,15 @@
                              const short* src,
                              size_t frames);
 /** \brief See \ref ebur128_add_frames_short */
-int ebur128_add_frames_int(ebur128_state* st,
-                             const int* src,
-                             size_t frames);
+int ebur128_add_frames_int(ebur128_state* st, const int* src, size_t frames);
 /** \brief See \ref ebur128_add_frames_short */
 int ebur128_add_frames_float(ebur128_state* st,
                              const float* src,
                              size_t frames);
 /** \brief See \ref ebur128_add_frames_short */
 int ebur128_add_frames_double(ebur128_state* st,
-                             const double* src,
-                             size_t frames);
+                              const double* src,
+                              size_t frames);
 
 /** \brief Get global integrated loudness in LUFS.
  *
@@ -419,14 +415,8 @@
  */
 int ebur128_relative_threshold(ebur128_state* st, double* out);
 
-
-
-int ebur128_true_peak_forget(ebur128_state* st,
-                             unsigned int channel_number,
-                             double* out,
-                             double forget);
 #ifdef __cplusplus
 }
 #endif
 
-#endif  /* EBUR128_H_ */
+#endif /* EBUR128_H_ */
