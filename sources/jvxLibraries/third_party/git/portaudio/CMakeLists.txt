cmake_minimum_required (VERSION 2.8)

message("--> configuring PortAudio")

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/portaudio)

	message("portaudio sub project not available. Starting script to download it.") 
	execute_process(COMMAND ${mysh} -c "cd ${CMAKE_CURRENT_SOURCE_DIR} ; ./prepareModules.sh; exit")
	message("portaudio installation complete.")
endif()


set(JVX_TARGET_NAME "portaudio")
project (${JVX_TARGET_NAME})

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi)
if(JVX_USE_PART_ASIO)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/ASIOSDK/host)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/ASIOSDK/host/pc)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/ASIOSDK/common)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win)
endif()
if(JVX_USE_PART_COREAUDIO)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/mac_osx)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/coreaudio)
endif()
if(JVX_USE_PART_ALSA)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/unix)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/alsa)
endif()
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/portaudio/include)

# Add source code files
set(LOCAL_SOURCES  "")
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_allocation.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_converters.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_cpuload.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_debugprint.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_dither.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_front.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/skeleton/pa_hostapi_skeleton.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_process.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_ringbuffer.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_stream.c)
set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/common/pa_trace.c)
if(JVX_USE_PART_ASIO)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/ASIOSDK/common/asio.cpp)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/ASIOSDK/host/asiodrivers.cpp)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/ASIOSDK/host/pc/asiolist.cpp)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/asio/pa_asio.cpp)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win/pa_win_hostapis.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win/pa_win_util.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win/pa_win_coinitialize.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/dsound/pa_win_ds.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/dsound/pa_win_ds_dynlink.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/wasapi/pa_win_wasapi.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win/pa_win_waveformat.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/wdmks/pa_win_wdmks.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win/pa_win_wdmks_utils.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/wmme/pa_win_wmme.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/win/pa_x86_plain_converters.c)
endif()
if(JVX_USE_PART_COREAUDIO)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/coreaudio/pa_mac_core.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/coreaudio/pa_mac_core_blocking.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/coreaudio/pa_mac_core_utilities.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/unix/pa_unix_hostapis.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/unix/pa_unix_util.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/coreaudio/pa_mac_core.c)
endif()
if(JVX_USE_PART_ALSA)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/unix/pa_unix_hostapis.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/os/unix/pa_unix_util.c)
  set(LOCAL_SOURCES  ${LOCAL_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/src/hostapi/alsa/pa_linux_alsa.c)
endif()




# Set compiler flags
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${JVX_CMAKE_C_FLAGS_STATIC_PIC}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${JVX_CMAKE_CXX_FLAGS_STATIC_PIC}")

# Finalize
add_library(${JVX_TARGET_NAME} STATIC ${LOCAL_SOURCES})

if(JVX_USE_PART_ASIO)
	set_target_properties(${JVX_TARGET_NAME} PROPERTIES COMPILE_DEFINITIONS "PA_USE_ASIO=1;PA_USE_DS=1;PA_USE_WMME=1;PA_USE_WASAPI=1;PA_USE_WDMKS=1;PAWIN_WDMKS_NO_KSGUID_LIB")
endif()
if(JVX_USE_PART_COREAUDIO)
  	set_target_properties(${JVX_TARGET_NAME} PROPERTIES COMPILE_DEFINITIONS "PA_USE_COREAUDIO=1")
endif()
if(JVX_USE_PART_ALSA)
	set_target_properties(${JVX_TARGET_NAME} PROPERTIES COMPILE_DEFINITIONS "PA_USE_ALSA=1;PA_USE_OSS=0;PA_USE_JACK=0")
	target_link_libraries(${JVX_TARGET_NAME} asound)
endif()
set_target_properties(${JVX_TARGET_NAME} PROPERTIES COMPILE_FLAGS "${JVX_CMAKE_C_FLAGS_STATIC}")
set_property(TARGET ${JVX_TARGET_NAME} PROPERTY FOLDER "${JVX_FOLDER_HIERARCHIE}/libraries-static-c")

if(JVX_RELEASE_SDK)
	install(TARGETS ${JVX_TARGET_NAME} ARCHIVE DESTINATION ${INSTALL_PATH_LIB_STATIC} RUNTIME DESTINATION ${INSTALL_PATH_LIB_SHARED} COMPONENT "release")
	install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/portaudio/include DESTINATION ${INSTALL_PATH_INCLUDE_STATIC}/third_party/git/portaudio/portaudio)
endif()
# no need for installation, wrapped by corresponding AuT component
#install(TARGETS ${JVX_TARGET_NAME} DESTINATION ${INSTALL_PATH_LIB_STATIC})
#install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ DESTINATION ${INSTALL_PATH_INCLUDE_STATIC}/${JVX_TARGET_NAME} FILES_MATCHING PATTERN "*.h")
